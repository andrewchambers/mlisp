use std

type obj = union
	`Sym byte[:]
	`Int int64
	`List list
	`Func func
	`Env env#
;;

type list = struct
	head : obj#
	tail : obj#
;;

type func = struct
	body : obj#
;;

type env = struct
	parent : std.option(env#)
	map : std.htab(obj#, obj#)#
;;

type ulisp = struct
	global : obj#
	gcptrs : obj#[:]
;;

const envhash = {pobj
	match pobj
	| &(`Sym name):	-> std.strhash(name)
	| _:	std.fatal("internal error\n")
	;;
}

const enveq = {a, b
	match (a, b)
	| (&(`Sym n1), &(`Sym n2)):	-> std.streq(n1, n2)
	| _:	std.fatal("internal error\n")
	;;
}

const mkenv = {ctx, parent : std.option(env#)
	var obj, env
	
	obj = std.alloc()
	env = std.alloc()
	env.map = std.mkht(envhash, enveq)
	obj# = `Env env
	addgcobj(ctx, obj)
	-> obj
}

const mksym = {ctx, name
	var sym
	
	sym = std.mk(`Sym std.sldup(name))
	addgcobj(ctx, sym)
	-> sym	
}

const addgcobj = {ctx, pobj
	ctx.gcptrs = std.slpush(ctx.gcptrs, pobj)
}

const gchash = {pobj
	-> pobj castto(uint32)
}

const gceq = {a, b
	-> a == b
}

const gcfree = {pobj
	match pobj
	| &(`Sym name):
		std.put("freeing {}\n", name)
		std.slfree(name)
	| &(`Env env):
		std.htfree(env.map)
		std.free(env)
	| &(`Int _):
	| &(`List _):
	| &(`Func _):
	;;
	std.free(pobj)
}

const gcwalk = {gctab, pobj
	if std.get(std.htget(gctab, pobj))
		-> void
	;;
	std.htput(gctab, pobj, true)
	match pobj
	| &(`Sym _):
	| &(`Int _):
	| &(`Env e):
		var syms = std.htkeys(e.map)
		for sym in syms
			gcwalk(gctab, sym)
			gcwalk(gctab, std.get(std.htget(e.map, sym)))
		;;
		std.slfree(syms)
	| &(`List l):
		gcwalk(gctab, l.head)
		gcwalk(gctab, l.tail)
	| &(`Func f):
		gcwalk(gctab, f.body)
	;;
}

const gc = {ctx
	var survivors, todie
	var marktab, marked
	
	survivors = [][:]
	todie = [][:]
	
	marktab = std.mkht(gchash, gceq)
	for obj in ctx.gcptrs
		std.htput(marktab, obj, false) 
	;;
	/* mark */
	gcwalk(marktab, ctx.global)
	/* sweep */
	for obj in ctx.gcptrs
		marked = std.get(std.htget(marktab, obj))
		if marked
			survivors = std.slpush(survivors, obj)
		else
			todie = std.slpush(todie, obj)
		;;
	;;
	for obj in todie
		gcfree(obj)
	;;
	std.htfree(marktab)
	std.slfree(ctx.gcptrs)
	std.slfree(todie)
	ctx.gcptrs = survivors
}

const envdefine = {env, sym, pobj
	match env
	| &(`Env e):	std.htput(e.map, sym, pobj)
	| _:	std.fatal("internal error\n")
	;;
}

const eval = {ctx, env, val
	match val
	| &(`Sym name):	-> val
	| &(`Int _): -> val
	| &(`List l): -> evalcall(ctx, env, l) 
	| _: std.fatal("cannot eval value\n")
	;;
}

const evalcall = {ctx, env, l
	match l.head
	| &(`Sym "if"):
		-> mksym(ctx, "#t")
	| &(`Sym "def"):
		-> mksym(ctx, "#t")
	| _: std.fatal("cannot eval value\n")
	;;
}

const newulisp = {
	var ctx
	
	ctx = std.alloc()
	ctx.gcptrs = [][:]
	ctx.global = mkenv(ctx, `std.None)
	-> ctx
}

const main = {
	var ctx : ulisp#
	
	ctx = newulisp()
	std.put("{}\n", eval(ctx, ctx.global, mksym(ctx, "foo")))
	gc(ctx)
}
